/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// Exemple d'utilisation
var teacher3 = {
    firstName: 'John',
    fullTimeEmployee: false,
    lastName: 'Doe',
    location: 'London',
    contract: false, // ← propriété dynamique ajoutée grâce à l'index signature
};
console.log(teacher3);
// Exemple d'utilisation
var director1 = {
    firstName: 'John',
    lastName: 'Doe',
    location: 'London',
    fullTimeEmployee: true,
    numberOfReports: 17, // 
};
console.log(director1);
// Fonction printTeacher
var printTeacher = function (firstName, lastName) {
    // Prendre la première lettre du prénom
    var firstLetter = firstName.charAt(0);
    return "".concat(firstLetter, ". ").concat(lastName);
};
// Tests
console.log(printTeacher("John", "Doe"));
console.log(printTeacher("Alice", "Martin"));
// Classe StudentClass
var StudentClass = /** @class */ (function () {
    function StudentClass(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    StudentClass.prototype.workOnHomework = function () {
        return "Currently working";
    };
    StudentClass.prototype.displayName = function () {
        return this.firstName;
    };
    return StudentClass;
}());
// Tests
var student = new StudentClass("Alice", "Martin");
console.log(student.displayName()); // Affiche : Alice
console.log(student.workOnHomework()); // Affiche : Currently working

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVdBLHdCQUF3QjtBQUN4QixJQUFNLFFBQVEsR0FBWTtJQUN4QixTQUFTLEVBQUUsTUFBTTtJQUNqQixnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsUUFBUSxFQUFFLFFBQVE7SUFDbEIsUUFBUSxFQUFFLEtBQUssRUFBRywwREFBMEQ7Q0FDN0UsQ0FBQztBQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFRdEIsd0JBQXdCO0FBQ3hCLElBQU0sU0FBUyxHQUFjO0lBQzNCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsUUFBUSxFQUFFLFFBQVE7SUFDbEIsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixlQUFlLEVBQUUsRUFBRSxFQUFHLEdBQUc7Q0FDMUIsQ0FBQztBQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFRdkIsd0JBQXdCO0FBQ3hCLElBQU0sWUFBWSxHQUF5QixVQUFDLFNBQVMsRUFBRSxRQUFRO0lBQzdELHVDQUF1QztJQUN2QyxJQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhDLE9BQU8sVUFBRyxXQUFXLGVBQUssUUFBUSxDQUFFLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsUUFBUTtBQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBZ0I3QyxzQkFBc0I7QUFDdEI7SUFJRSxzQkFBWSxTQUFpQixFQUFFLFFBQWdCO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxxQ0FBYyxHQUFkO1FBQ0UsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0lBRUQsa0NBQVcsR0FBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDO0FBRUQsUUFBUTtBQUNSLElBQU0sT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQU0sa0JBQWtCO0FBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBRyw4QkFBOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXBlc2NyaXB0X2RlcGVuZGVuY2llcy8uL2pzL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tRVhFUkNJQ0UgMS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEludGVyZmFjZSBUZWFjaGVyIGF2ZWMgcmVhZG9ubHkgZXQgaW5kZXggc2lnbmF0dXJlXG5pbnRlcmZhY2UgVGVhY2hlciB7XG4gIHJlYWRvbmx5IGZpcnN0TmFtZTogc3RyaW5nOyAgICAvLyByZWFkb25seSA9IG5lIHBldXQgcGFzIMOqdHJlIG1vZGlmacOpIGFwcsOocyBjcsOpYXRpb25cbiAgcmVhZG9ubHkgbGFzdE5hbWU6IHN0cmluZzsgICAgIC8vIHJlYWRvbmx5ID0gbmUgcGV1dCBwYXMgw6p0cmUgbW9kaWZpw6kgYXByw6hzIGNyw6lhdGlvblxuICBmdWxsVGltZUVtcGxveWVlOiBib29sZWFuO1xuICB5ZWFyc09mRXhwZXJpZW5jZT86IG51bWJlcjsgICAgLy8gPyA9IG9wdGlvbm5lbFxuICBsb2NhdGlvbjogc3RyaW5nO1xuICBba2V5OiBzdHJpbmddOiBhbnk7ICAgICAgICAgICAgLy8gaW5kZXggc2lnbmF0dXJlID0gcHJvcHJpw6l0w6lzIGR5bmFtaXF1ZXNcbn1cblxuLy8gRXhlbXBsZSBkJ3V0aWxpc2F0aW9uXG5jb25zdCB0ZWFjaGVyMzogVGVhY2hlciA9IHtcbiAgZmlyc3ROYW1lOiAnSm9obicsXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IGZhbHNlLFxuICBsYXN0TmFtZTogJ0RvZScsXG4gIGxvY2F0aW9uOiAnTG9uZG9uJyxcbiAgY29udHJhY3Q6IGZhbHNlLCAgLy8g4oaQIHByb3ByacOpdMOpIGR5bmFtaXF1ZSBham91dMOpZSBncsOiY2Ugw6AgbCdpbmRleCBzaWduYXR1cmVcbn07XG5cbmNvbnNvbGUubG9nKHRlYWNoZXIzKTtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tRVhFUkNJQ0UgMi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEludGVyZmFjZSBEaXJlY3RvcnMgcXVpIGjDqXJpdGUgZGUgVGVhY2hlclxuaW50ZXJmYWNlIERpcmVjdG9ycyBleHRlbmRzIFRlYWNoZXIge1xuICBudW1iZXJPZlJlcG9ydHM6IG51bWJlcjtcbn1cblxuLy8gRXhlbXBsZSBkJ3V0aWxpc2F0aW9uXG5jb25zdCBkaXJlY3RvcjE6IERpcmVjdG9ycyA9IHtcbiAgZmlyc3ROYW1lOiAnSm9obicsXG4gIGxhc3ROYW1lOiAnRG9lJyxcbiAgbG9jYXRpb246ICdMb25kb24nLFxuICBmdWxsVGltZUVtcGxveWVlOiB0cnVlLFxuICBudW1iZXJPZlJlcG9ydHM6IDE3LCAgLy8gXG59O1xuXG5jb25zb2xlLmxvZyhkaXJlY3RvcjEpO1xuXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUVYRVJDSUNFIDMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5pbnRlcmZhY2UgcHJpbnRUZWFjaGVyRnVuY3Rpb24ge1xuICAoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG59XG5cbi8vIEZvbmN0aW9uIHByaW50VGVhY2hlclxuY29uc3QgcHJpbnRUZWFjaGVyOiBwcmludFRlYWNoZXJGdW5jdGlvbiA9IChmaXJzdE5hbWUsIGxhc3ROYW1lKSA9PiB7XG4gIC8vIFByZW5kcmUgbGEgcHJlbWnDqHJlIGxldHRyZSBkdSBwcsOpbm9tXG4gIGNvbnN0IGZpcnN0TGV0dGVyID0gZmlyc3ROYW1lLmNoYXJBdCgwKTtcbiAgXG4gIHJldHVybiBgJHtmaXJzdExldHRlcn0uICR7bGFzdE5hbWV9YDtcbn07XG5cbi8vIFRlc3RzXG5jb25zb2xlLmxvZyhwcmludFRlYWNoZXIoXCJKb2huXCIsIFwiRG9lXCIpKTsgICAgXG5jb25zb2xlLmxvZyhwcmludFRlYWNoZXIoXCJBbGljZVwiLCBcIk1hcnRpblwiKSk7XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUVYRVJDSUNFIDQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbnRlcmZhY2UgcG91ciBsZSBjb25zdHJ1Y3RldXIgZGUgU3R1ZGVudENsYXNzXG5pbnRlcmZhY2UgU3R1ZGVudENvbnN0cnVjdG9yIHtcbiAgbmV3IChmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZyk6IFN0dWRlbnRDbGFzc0ludGVyZmFjZTtcbn1cblxuLy8gSW50ZXJmYWNlIHBvdXIgbGEgY2xhc3NlIFN0dWRlbnRDbGFzc1xuaW50ZXJmYWNlIFN0dWRlbnRDbGFzc0ludGVyZmFjZSB7XG4gIGZpcnN0TmFtZTogc3RyaW5nO1xuICBsYXN0TmFtZTogc3RyaW5nO1xuICB3b3JrT25Ib21ld29yaygpOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lKCk6IHN0cmluZztcbn1cblxuLy8gQ2xhc3NlIFN0dWRlbnRDbGFzc1xuY2xhc3MgU3R1ZGVudENsYXNzIGltcGxlbWVudHMgU3R1ZGVudENsYXNzSW50ZXJmYWNlIHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmZpcnN0TmFtZSA9IGZpcnN0TmFtZTtcbiAgICB0aGlzLmxhc3ROYW1lID0gbGFzdE5hbWU7XG4gIH1cblxuICB3b3JrT25Ib21ld29yaygpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIkN1cnJlbnRseSB3b3JraW5nXCI7XG4gIH1cblxuICBkaXNwbGF5TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmZpcnN0TmFtZTtcbiAgfVxufVxuXG4vLyBUZXN0c1xuY29uc3Qgc3R1ZGVudCA9IG5ldyBTdHVkZW50Q2xhc3MoXCJBbGljZVwiLCBcIk1hcnRpblwiKTtcbmNvbnNvbGUubG9nKHN0dWRlbnQuZGlzcGxheU5hbWUoKSk7ICAgICAgLy8gQWZmaWNoZSA6IEFsaWNlXG5jb25zb2xlLmxvZyhzdHVkZW50LndvcmtPbkhvbWV3b3JrKCkpOyAgIC8vIEFmZmljaGUgOiBDdXJyZW50bHkgd29ya2luZ1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=